# This workflow builds a Docker image from a git ref and pushes it to GitHub Container Registry (ghcr.io) / GitHub Packages
# Image tags are not automatically created. Instead, the input parameter `image_tag` must be provided when calling the workflow. This can be used to pass the application Semver from the output of a previous workflow (e.g. release.yml)

name: docker build push

on:
  workflow_call:
    inputs:
      source_ref:
        type: string
        description: Git ref to build
        default: ${{ github.event.ref }}    # defaults to ref that triggered the (caller) worfklow
      image_name:
        type: string
        description: Name of the docker image (must include package name, e.g. primoxo/preview-generator)
        required: true
      image_tag:
        type: string
        description: Tag to be added to the image
        required: true
      image_is_latest:
        type: boolean
        description: Defines whether tag "latest" is added to the pushed image. This will cause "latest" to reference the image which has been pushed last (-> "latest" might not correspond to image with highest Semver)
        default: true
      checkout_submodules:
        type: boolean
        description: Whether to checkout git submodules or not for the build step of the docker image
        default: false
    

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.source_ref }}
          fetch-depth: 1                # only fetch last commit; no history
          submodules: ${{ inputs.checkout_submodules }}
      
      # extract docker metadata from Git reference and GitHub event
      # This action is capable of tagging docker images for a variety of GitHub events (e.g. tag image tag from branch names, git tags, or PR names)
      # We DO NOT take use of the capability and instead explicitly define tags which should be added (with `type=raw,value=<TAG_VALUE>`)
      # This is because we want to take control over the images which are created. (DO NOT create images for just any git ref or tag)
      # The logic, at which point in time images are created is left to the calling workflows (e.g. by setting appropriate triggers for these workflows). Calling workflows should explicitly define a tag for the docker image
      - name: extract docker metadata
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ inputs.image_name }}
          tags: |
            type=raw,value=${{ inputs.image_tag }}
            ${{ inputs.image_is_latest && 'type=raw,value=latest' }}     #  add `latest` tag if required

      # login to docker registry / github packages
      - name: docker login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # build and push image
      - name: build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
