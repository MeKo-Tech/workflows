# deploys docker-compose application to remote host

on:
  workflow_call:
    inputs:
      source_ref:
        type: string
        default: ${{ github.event.ref }}
        description: git ref to deploy
      ssh_host:
        type: string
        required: true
        description: hostname of the remote docker host
      ssh_user:
        type: string
        required: true
        description: username used to authenticate to remote docker host
      compose_file:
        type: string
        required: true
        description: path to docker-compose file relative to repository root
      compose_project_name:
        type: string
        required: true
        description: name of the docker compose project
      image_tag:
        type: string
        required: true
        description: tag of the docker image to deploy
    secrets:
      ssh_private_key:
        required: true
        description: ssh private key used to authenticate to remote docker host
      env_file_data:
        required: true
        description: .env file content holding application configuration. Check docker-compose file for available variables. Values must not contain single quotes

env:
  DOCKER_CONTEXT_NAME: docker-remote-host   # name of the docker context used to connect to remote host

jobs:
  deploy-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.source_ref }}
          fetch-depth: 1

      - name: add ssh private key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.ssh_private_key }}

      # Todo: for security hardening, the hosts server public key should explicity be specified (e.g. fro a repository variable) instead of using ssh-keyscan
      - name: add ssh known host
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ inputs.ssh_host }} >> ~/.ssh/known_hosts

      - name: create docker context
        run: |
          docker context create ${{ env.DOCKER_CONTEXT_NAME }} --docker "host=ssh://${{ inputs.ssh_user }}@${{ inputs.ssh_host }}"

      - name: docker login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: upgrade service
        run: |
          echo "deploy version ${{ inputs.image_tag }} to ${{ inputs.ssh_host }}"

          # use docker context
          docker context use ${{ env.DOCKER_CONTEXT_NAME }}

          # write app config to local .env file
          #  secrets.env_file_data will be expanded, but variables in the string ($) will not be substituted
          echo '${{ secrets.env_file_data }}' > .env

          # remove blank lines
          sed -i "/^[[:space:]]*$/d" .env

          # remove double quotes around variable values if there are any (required to prevent something like VAR_NAME='"VALUE"')
          sed -i 's/="/=/' .env
          sed -i 's/"$//' .env

          # set env values in single quotes
          #   .env file format must be VAR_NAME=VALUE and will be replaced by VAR_NAME='VALUE'
          sed -i "s/=/='/" .env
          sed -i "s/$/'/" .env

          # todo: remove after debugging
          cat .env


          # todo: either remove after debugging or maks secret values
          echo "docker compose config:"
          IMAGE_TAG=${{ inputs.image_tag }} \
          docker compose -f ${{ inputs.compose_file }} \
            -p ${{ inputs.compose_project_name }} \
            --env-file .env \
            config

          # run application
          #   environment variables are passed via .env file
          #   IMAGE_TAG variable is used to specify the tag for the docker image. Substitution from env variables takes precedence over .env file
          IMAGE_TAG=${{ inputs.image_tag }} \
          docker compose -f ${{ inputs.compose_file }} \
            -p ${{ inputs.compose_project_name }} \
            --env-file .env \
             up -d --force-recreate