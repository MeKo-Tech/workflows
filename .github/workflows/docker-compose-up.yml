# The workflow deploys a docker-compose application to a remote host via ssh.
# 
# The workflow uses a docker context to connect to the remote host. 
# The docker-compose and other required files are copied to the CI runner (by checking out the repo), but not copied to the remote host.
# The application is upgraded by running docker-compose up directly at the CI runner. The Docker context is used to connect to the Docker Daemon at the remote host
#
# In general, application configurations are passed from environment variables when running docker-compoes up
# The docker-compose file must be written in a way that these env variables are used correctly (e.g. by substituting variables within docker-compose.yml, or by passing variables to the container).
# Environment variables CANNOT be passed from the calling workflow to the reusable workflow which is implemented in this file.
# As a workaround, the calling workflow must provide the secret env_file_data which holds the application configuration in a .env file format. The data is sourced before running docker-compose up.
# The calling workflow can use yaml syntac for multi-line strings to merge multiple variables into that secret (see examples)
#
# Limitations
#   The special environment variable `IMAGE_TAG` variable must be used to specify the tag / version of the docker image to deploy. 
#     The docker-compose file must be implemented such that this variable is correctly interpolated
#   The variable value is read from `inputs.image_tag` and overwrites any value `IMAGE_TAG=<TAG>` which might be specified in inputs.env_file_data
#   `inputs.image_tag` should be used to pass the correct application version from outputs of previous workflows (e.g. release.yml)
#
# further reading:
#   https://docs.docker.com/compose/environment-variables/set-environment-variables/


on:
  workflow_call:
    inputs:
      source_ref:
        type: string
        default: ${{ github.event.ref }}
        description: Git ref to read docker-compose file from
      ssh_host:
        type: string
        required: true
        description: Hostname of the remote docker host
      ssh_user:
        type: string
        required: true
        description: Username used to authenticate to remote docker host
      compose_file:
        type: string
        required: true
        description: Path to docker-compose file relative to repository root
      compose_project_name:
        type: string
        required: true
        description: Name of the docker compose project
      image_tag:
        type: string
        required: true
        description: Tag of the docker image to deploy
    secrets:
      ssh_private_key:
        required: true
        description: Ssh private key used to authenticate to remote docker host
      env_file_data:
        required: true
        description: .env file content holding application configuration. Check docker-compose file for available variables. Values must not contain single quotes

env:
  DOCKER_CONTEXT_NAME: docker-remote-host   # name of the docker context used to connect to remote host

jobs:
  deploy-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.source_ref }}
          fetch-depth: 1  # fetch only last comment

      - name: add ssh private key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.ssh_private_key }}

      # Todo: for security hardening, the hosts server public key should explicity be specified (e.g. fro a repository variable) instead of using ssh-keyscan
      - name: add ssh known host
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ inputs.ssh_host }} >> ~/.ssh/known_hosts

      - name: create docker context
        run: |
          docker context create ${{ env.DOCKER_CONTEXT_NAME }} --docker "host=ssh://${{ inputs.ssh_user }}@${{ inputs.ssh_host }}"

      - name: docker login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: upgrade service
        run: |
          echo "deploy version ${{ inputs.image_tag }} to ${{ inputs.ssh_host }}"

          # use docker context
          docker context use ${{ env.DOCKER_CONTEXT_NAME }}

          # write app config to local .env file
          #  secrets.env_file_data will be expanded, but variables in the string ($) will not be substituted
          echo '${{ secrets.env_file_data }}' > .env

          # remove blank lines from env file
          sed -i "/^[[:space:]]*$/d" .env
          # remove double quotes around variable values if there are any (required to prevent something like VAR_NAME='"VALUE"')
          sed -i 's/="/=/' .env
          sed -i 's/"$//' .env
          # wrap env values in single quotes to prevent furhter variable substitutation when calling docker-compose up
          #   .env file format must be VAR_NAME=VALUE and will be replaced by VAR_NAME='VALUE'
          sed -i "s/=/='/" .env
          sed -i "s/$/'/" .env

          # todo: remove after debugging
          cat .env

          # todo: either remove after debugging or maks secret values
          echo "docker compose config:"
          IMAGE_TAG=${{ inputs.image_tag }} \
          docker compose -f ${{ inputs.compose_file }} \
            -p ${{ inputs.compose_project_name }} \
            --env-file .env \
            config

          # install or upgrade application
          #   environment variables are passed via .env file
          #   IMAGE_TAG variable is used to specify the tag for the docker image. Substitution from env variables takes precedence over .env file
          IMAGE_TAG=${{ inputs.image_tag }} \
          docker compose -f ${{ inputs.compose_file }} \
            -p ${{ inputs.compose_project_name }} \
            --env-file .env \
             up -d --force-recreate