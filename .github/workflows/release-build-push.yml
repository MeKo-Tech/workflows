# This workflow generates GitHub releases and builds and pushes Docker Images after creating a release.
# The workflow should be used in conjunction with `release-pr.yml` which generates release-PRs from conventional commits (which is required to create GitHub releases with release.yml)
#
# See `release.yml` and `docker-build-push.yml` for further details

name: release-build-push

on:
  workflow_call:
    inputs:
      target_branch:
        type: string
        description: 'target branch for release pull requests'
        default: main
      config_file:
        type: string
        description: 'path to release-please config file'
        default: release-please-config.json
      manifest_file:
        type: string
        description: 'path to release-please manifest file'
        default: .release-please-manifest.json
      image_name:
        type: string
        description: 'name of the docker image (must include package name, e.g. meko-tech/preview-generator)'
        required: true
      image_is_latest:
        type: boolean
        description: 'defines whether tag "latest" is added to the image'
        default: true
      checkout_submodules:
        type: boolean
        description: Whether to checkout git submodules or not for the build step of the docker image
        default: false
  
jobs:
  release:
    uses: ./.github/workflows/release.yml   # call workflow from this repo
    permissions:
      contents: write
      pull-requests: write
    with:
      target_branch: ${{ inputs.target_branch }}
      config_file: ${{ inputs.config_file }}
      manifest_file: ${{ inputs.manifest_file }}

  docker-build-push:
    needs:
      - release
    if: ${{ needs.release.outputs.release_created }}
    uses: ./.github/workflows/docker-build-push.yml   # call workflow from this repo
    permissions:
      contents: read
      packages: write
    with:
      image_name: ${{ inputs.image_name }}
      image_tag: ${{ needs.release.outputs.release_semver }}
      image_is_latest: ${{ inputs.image_is_latest }}
      checkout_submodules: ${{ inputs.checkout_submodules }}
